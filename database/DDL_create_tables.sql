
begin;

-- PostgreSQL specific commands
-- CREATE USER netbizz WITH CREATEDB CREATEROLE SUPERUSER ENCRYPTED PASSWORD '***';
-- select current_database()
-- select current_user
-- SELECT * FROM information_schema.tables WHERE table_schema = 'netbizz'


set role netbizz;

delete from netbizz.attachment;
delete from netbizz.notification;
delete from netbizz.task_instance;
delete from netbizz.workflow_instance;
delete from netbizz.transition;
delete from netbizz.task_definition;
delete from netbizz.workflow_definition;
delete from netbizz.bid_request;
delete from netbizz.user_job_position;
delete from netbizz.job_position;
delete from netbizz.user_role;
delete from netbizz.application_user;
delete from netbizz.tenant_department;
delete from netbizz.tenant_company;

drop table if exists netbizz.attachment;
drop table if exists netbizz.notification;
drop table if exists netbizz.task_instance;
drop table if exists netbizz.workflow_instance;
drop table if exists netbizz.transition;
drop table if exists netbizz.task_definition;
drop table if exists netbizz.workflow_definition;
drop table if exists netbizz.bid_request;
drop table if exists netbizz.user_job_position;
drop table if exists netbizz.job_position;
drop table if exists netbizz.user_role;
drop table if exists netbizz.application_user;
drop table if exists netbizz.tenant_department;
drop table if exists netbizz.tenant_company;

create table if not exists netbizz.tenant_company (
    id integer not null generated by default as identity primary key,
    company_name character varying (50) not null,
    address_street character varying (50) not null,
    address_zip_city character varying (50) not null,
    version integer
);
alter sequence tenant_company_id_seq restart with 1000;
create index on netbizz.tenant_company(lower(trim(company_name)));

-- VIEAVEA customers departments. This is only created by VIAVEA administrators

create table if not exists netbizz.tenant_department (
    id integer not null generated by default as identity primary key,
    tenant_company_id integer not null,
    department_name character varying (50) not null,
    description character varying (250),
    version integer,
    foreign key(tenant_company_id) references tenant_company(id) on delete restrict
);
alter sequence tenant_department_id_seq restart with 1000;
create index on netbizz.tenant_department(tenant_company_id);
create unique index on  netbizz.tenant_department(tenant_company_id, lower(trim(department_name)));


create table if not exists netbizz.application_user (
    id integer not null generated by default as identity primary key,
    hashed_password character varying (256) not null,
    tenant_department_id integer not null,               -- Hard relation
    must_change_pwd boolean not null,
    fullname character varying (50),
    email character varying (100) not null,
    email_confirmed boolean not null,                   --  used for spring security  boolean isEnabled() and boolean isCredentialsNonExpired();
    email_confirmation_string character varying (256),
    birthday date,
    phone character varying (15),
    created timestamp not null,
    last_login timestamp not null,
    is_locked boolean not null,                         -- used for spring security  boolean isAccountNonLocked();-
    is_disabled boolean not null,                       -- when an employee is terminated
    description character varying (250),
    picture bytea,
    version integer,
    foreign key(tenant_department_id) references tenant_department on delete cascade
);
alter sequence application_user_id_seq restart with 1000;
create unique index on netbizz.application_user(lower(trim(email)));
create index on netbizz.application_user(tenant_department_id);


-- VIEAVEA customers user roles. This is only created by VIAVEA administrators
-- This is VERY IMPORTANT, since it is used for authorization on the different views and details
create table if not exists netbizz.user_role (                  -- Security role NOT job
    user_id integer not null,                                   -- Multiple rolws allowed per user
    role character varying (30) not null,                       -- Application defined in source for security!
    foreign key(user_id) references application_user on delete cascade
);
create index on netbizz.user_role(user_id);


create table if not exists netbizz.job_position (
    id integer not null generated by default as identity primary key,
    job_position_name character varying (30) not null,             -- Application defined in source
    resource_manager boolean not null,
    executive_sponsor boolean not null,
    description character varying (250),
    version integer
);
alter sequence job_position_id_seq restart with 1000;
create index on netbizz.job_position(job_position_name);


create table if not exists netbizz.user_job_position (
    user_id integer not null,
    job_position_id integer not null,
    foreign key(user_id) references application_user on delete cascade,
    foreign key(job_position_id) references job_position on delete cascade
);
create index on netbizz.user_job_position(user_id);
create index on netbizz.user_job_position(job_position_id);

-- ************************************************************************************************************

create table if not exists netbizz.bid_request (
    id integer not null generated by default as identity primary key,
    title character varying (50) not null,
    created_by_user integer not null,
    created timestamp not null,
    last_modified timestamp not null,

    commercial_core_start_year integer,
    commercial_core_end_year integer,
    option_end_year integer,
    tender_type character varying (50) not null,

    deadline_bid timestamp not null,
    negotiation date,
    contract_signing date,
    transition_start date,
    operation_start date,

    solution_description text,
    critical_issues text,
    price_percentage integer,
    quality_percentage integer,

    template_id integer,
    version integer
    foreign key(created_by_user) references application_user on delete restrict
);
alter sequence bid_request_id_seq restart with 1000;
create index on netbizz.bid_request(created_by_user);


-- ************************************************************************************************************
-- W O R K F L O W
-- ************************************************************************************************************
create table if not exists netbizz.workflow_definition (
    id integer not null generated by default as identity primary key,
    name character varying (50) not null,           -- (e.g., "Standard Commercial Bid", "Large Strategic Bid")
    description character varying (250),
    version integer not null,
    is_active boolean not null,                     -- indicates if this version can be used for new bids)
    created_date timestamp not null,
    modified_date timestamp,
    version integer
);
alter sequence workflow_definition_id_seq restart with 1000;
create index on netbizz.workflow_definition(lower(trim(name)));

create table if not exists netbizz.task_definition (
    id integer not null generated by default as identity primary key,
    workflow_definition_id integer not null,
    name character varying (50) not null,                   -- (e.g., "Qualify Opportunity", "Develop Technical Proposal", "Legal Review", "Pricing Approval")
    description character varying (250),
    task_type character varying (50) not null,              -- (e.g., 'Manual', 'Approval', 'NotificationOnly', 'SystemTask' - could trigger app logic)
    assignment_type character varying (50) not null,        -- (e.g., 'Role', 'SpecificUser', 'BidManager', 'PreviousTaskAssignee')
    assignment_value character varying (50),                -- (Stores RoleID, UserID, or logic identifier based on AssignmentType)
    default_duration_days float,                            -- minimum 1/2 days (Optional, for SLA/due date calculation)
    form_schema_definition bytea,                           -- (Optional, JSON or link to define data needed for this task)
    version integer,
    foreign key(workflow_definition_id) references workflow_definition on delete cascade
);
alter sequence task_definition_id_seq restart with 1000;
create index on netbizz.task_definition(lower(trim(name)));
create index on netbizz.task_definition(workflow_definition_id);


create table if not exists netbizz.transition (
    id integer not null generated by default as identity primary key,
    workflow_definition_id integer not null,
    source_task_definition_id integer not null,
    target_task_definition_id integer not null,
    condition character varying (50),                       -- (Optional, e.g., "'ApprovalStatus' == 'Approved'", "'BidValue' > 100000". Simple rule language needed)
    action_name character varying (50),                     --(Optional, label for the action triggering the transition, e.g., "Submit", "Approve", "Reject")
    version integer,
    foreign key(workflow_definition_id) references workflow_definition on delete cascade,
    foreign key(source_task_definition_id) references task_definition on delete cascade,
    foreign key(target_task_definition_id) references task_definition on delete cascade
);
alter sequence transition_id_seq restart with 1000;
create index on netbizz.transition(workflow_definition_id);
create index on netbizz.transition(source_task_definition_id);
create index on netbizz.transition(target_task_definition_id);


create table if not exists netbizz.workflow_instance (
    id integer not null generated by default as identity primary key,
    workflow_definition_id integer not null,
    bid_request_id integer not null,
    current_state_name character varying (50),              -- (Name of the current active task/status)
    status character varying (50),                          -- (e.g., 'Running', 'Completed', 'Cancelled', 'Suspended', 'Failed')
    start_date timestamp,
    end_date timestamp,
    initiator_user_id integer not null,                     -- (FK to User)
    version integer,
    foreign key(workflow_definition_id) references workflow_definition on delete cascade,
    foreign key(bid_request_id) references bid_request on delete cascade
);
alter sequence workflow_instance_id_seq restart with 1000;
create index on netbizz.workflow_instance(workflow_definition_id);
create index on netbizz.workflow_instance(bid_request_id);


create table if not exists netbizz.task_instance (
    id integer not null generated by default as identity primary key,
    workflow_instance_id integer not null,
    task_definition_id  integer not null,                   -- (FK to TaskDefinition)
    status character varying (50),                          -- (e.g., 'NotStarted', 'Assigned', 'InProgress', 'Completed', 'Rejected', 'Skipped')
    assigned_user_id integer,                               -- (FK to User, nullable if assigned to a role pool)
    assigned_jobposition_id integer,                               -- (FK to Role, nullable if assigned to specific user)
    created_date timestamp not null,
    due_date timestamp,                                     -- (Optional, calculated or set)ate (Optional, calculated or set)
    completed_date timestamp,
    completion_user_id integer,                             -- (FK to User)
    outcome character varying (50),                         -- (Optional, e.g., 'Approved', 'Rejected', 'Submitted', captured action that completed the task)
    version integer,
    -- TaskData (JSON or XML blob for data collected/used specifically by this task instance)
    foreign key(workflow_instance_id) references workflow_instance on delete cascade,
    foreign key(task_definition_id) references task_definition on delete cascade

);
alter sequence task_instance_id_seq restart with 1000;
create index on netbizz.task_instance(workflow_instance_id);
create index on netbizz.task_instance(task_definition_id);
create index on netbizz.task_instance(assigned_user_id);


create table if not exists netbizz.notification (
    id integer not null generated by default as identity primary key,
    workflow_instance_id integer not null,
    task_instance_id integer not null,
    recipient_user_id integer not null,
    subject character varying (50) not null,
    message character varying (250) not null,
    sent_timestamp timestamp not null,
    status character varying (50) not null,                 --  (e.g., 'Pending', 'Sent', 'Failed', 'Read')
    version integer,
    foreign key(workflow_instance_id) references workflow_instance on delete cascade,
    foreign key(task_instance_id) references task_instance on delete cascade,
    foreign key(recipient_user_id) references application_user on delete cascade
);
alter sequence notification_id_seq restart with 1000;
create index on netbizz.notification(workflow_instance_id);
create index on netbizz.notification(task_instance_id);
create index on netbizz.notification(recipient_user_id);


create table if not exists netbizz.attachment (
    id integer not null generated by default as identity primary key,
    workflow_instance_id integer not null,
    task_instance_id integer not null,
    attached_by_user_id integer not null,
    attached_at timestamp not null,
    fileName character varying (250) not null,
    file_reference character varying (250),                 -- (Path or ID in a DMS)
    description character varying (50),
    version integer,
    foreign key(workflow_instance_id) references workflow_instance on delete cascade,
    foreign key(task_instance_id) references task_instance on delete cascade,
    foreign key(attached_by_user_id) references application_user on delete cascade
);
alter sequence attachment_id_seq restart with 1000;
create index on netbizz.attachment(workflow_instance_id);
create index on netbizz.attachment(task_instance_id);
create index on netbizz.attachment(attached_by_user_id);


create table if not exists netbizz.item (
    id integer not null generated by default as identity primary key,
    application_user_id integer not null,
    item_name character varying (50) not null,
    category character varying (50),
    kr_per_liter real,
    price integer,
    warehouse_id integer,
    birthday date,
    active boolean,
    criticality character varying (50),
    description text,
    yearly_amount integer array[10],
    impact_amount integer array[10],
    likelihood numeric(3, 1) array[10],
    version integer,
    foreign key(application_user_id) references application_user(id) on delete cascade,
    foreign key(warehouse_id) references warehouse(id)
);
alter sequence item_id_seq restart with 1000;
create index on netbizz.item(application_user_id);


create table if not exists netbizz.warehouse (
    id integer not null generated by default as identity primary key,
    warehouse_name character varying (50) not null,
    street character varying (50),
    city character varying (50),
    sqr_m2 integer,
    version integer
);
alter sequence warehouse_id_seq restart with 1000;




end;

