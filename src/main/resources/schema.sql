-- set role sa

-- delete from attachment;
-- delete from notification;
-- delete from task_instance;
-- delete from workflow_instance;
-- delete from transition;
-- delete from task_definition;
-- delete from workflow_definition;
-- delete from bid_request;
-- delete from user_job_position;
-- delete from job_position;
-- delete from user_role;
-- delete from application_user;
-- delete from tenant_department;
-- delete from tenant_company;

-- drop table if exists attachment;
-- drop table if exists notification;
-- drop table if exists task_instance;
-- drop table if exists workflow_instance;
-- drop table if exists transition;
-- drop table if exists task_definition;
-- drop table if exists workflow_definition;
-- drop table if exists bid_request;
-- drop table if exists user_job_position;
-- drop table if exists job_position;
-- drop table if exists user_role;
-- drop table if exists application_user;
-- drop table if exists tenant_department;
-- drop table if exists tenant_company;

create table if not exists tenant_company (
    id integer not null generated by default as identity primary key,
    company_name character varying (50) not null,
    address_street character varying (50) not null,
    address_zip_city character varying (50) not null,
    version integer not null
);
-- alter sequence tenant_company_id_seq restart with 1000;
create index on tenant_company(company_name);

create table if not exists tenant_department (
    id integer not null generated by default as identity primary key,
    tenant_company_id integer not null,
    department_name character varying (50) not null,
    description character varying (250),
    version integer not null,
    foreign key(tenant_company_id) references tenant_company(id) on delete restrict
);
-- alter sequence tenant_department_id_seq restart with 1000;
create index on tenant_department(tenant_company_id);
create unique index on tenant_department(tenant_company_id, department_name);
-- create unique index on  tenant_department(tenant_company_id, lower(trim(department_name)));


create table if not exists application_user (
    id integer not null generated by default as identity primary key,
    hashed_password character varying (256) not null,
    tenant_department_id integer not null,               -- Hard relation
    must_change_pwd boolean not null,
    fullname character varying (50),
    email character varying (100) not null,
    email_confirmed boolean not null,                   --  used for spring security  boolean isEnabled() and boolean isCredentialsNonExpired();
    email_confirmation_string character varying (256),
    birthday date,
    phone character varying (15),
    created timestamp not null,
    last_login timestamp not null,
    is_locked boolean not null,                         -- used for spring security  boolean isAccountNonLocked();-
    is_disabled boolean not null,                       -- when an employee is terminated
    description character varying (250),
    picture bytea,
    version integer,
    foreign key(tenant_department_id) references tenant_department on delete cascade
);
-- alter sequence application_user_id_seq restart with 1000;
create unique index on application_user(email);
create index on application_user(tenant_department_id);


-- VIEAVEA customers user roles. This is only created by VIAVEA administrators
-- This is VERY IMPORTANT, since it is used for authorization on the different views and details
create table if not exists user_role (                  -- Security role NOT job
    user_id integer not null,                                   -- Multiple rolws allowed per user
    role character varying (30) not null,                       -- Application defined in source for security!
    foreign key(user_id) references application_user on delete cascade
);
create index on user_role(user_id);


create table if not exists job_position (
    id integer not null generated by default as identity primary key,
    job_position_name character varying (30) not null,             -- Application defined in source
    resource_manager boolean not null,
    executive_sponsor boolean not null,
    description character varying (250),
    version integer
);
-- alter sequence job_position_id_seq restart with 1000;
create index on job_position(job_position_name);


create table if not exists user_job_position (
    user_id integer not null,
    job_position_id integer not null,
    foreign key(user_id) references application_user on delete cascade,
    foreign key(job_position_id) references job_position on delete cascade
);
create index on user_job_position(user_id);
create index on user_job_position(job_position_id);


create table if not exists warehouse (
    id integer not null generated by default as identity primary key,
    warehouse_name character varying (50) not null,
    street character varying (50),
    city character varying (50),
    sqr_m2 integer,
    version integer
);
-- alter sequence warehouse_id_seq restart with 1000;

create table if not exists item (
    id integer not null generated by default as identity primary key,
    application_user_id integer not null,
    item_name character varying (50) not null,
    category character varying (50),
    kr_per_liter real,
    price integer,
    warehouse_id integer,
    birthday date,
    active boolean,
    criticality character varying (50),
    description text,
    yearly_amount integer array[10],
    impact_amount integer array[10],
    likelihood numeric array[10],
    version integer,
    foreign key(application_user_id) references application_user(id) on delete cascade,
    foreign key(warehouse_id) references warehouse(id)
);
-- alter sequence item_id_seq restart with 1000;
create index on item(application_user_id);


